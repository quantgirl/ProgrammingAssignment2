library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:rpart", unload=TRUE)
install.packages("psych")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("psych")
install.packages("psych")
install.packages("psych")
x=c(1,3,5,7)
x
x=seq(1,30,2)
x
x=seq(1,300,2)
x
x=1:100
x
y=rep(5,10)
y
y=data.frame(id=1:4,score=c(70,81,51,79))
y
y=data.frame(id=1:4, score=c(70,81,51,79))
y
y=data.frame(age=40:70,IQ=100:130)
y
plot(age,IQ)
plot(y$age,y$IQ)
cor(y$age,y$IQ)
z=sqrt(var(y$age))
z
z2=sqrt(var(y$IQ))
z2
plot(data=y,age,IQ)
plot(with=y,age,IQ)
y-data.frame(name=c("g","a","s","U"),score=c(4,5,6,6))
y-data.frame(nam=c("g","a","s","U"),score=c(4,5,6,6))
y=data.frame(nam=c("g","a","s","U"),score=c(4,5,6,6))
y
y=matrix(1:9,ncol=3)
y
solve(y)
y=matrix(c(1,3,5,9),ncol=2)
y
solve(y)
z=solve(y)
a=y%*%z
a
a=list(name=c("g","u"),score=10)
a
?array
a=array(1:8,c(2,2,2))
a
a=array(1:8,c(2,2,2))
a=array(c(6,7,10,3,4,5,5,1),(2,2,2))
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2,)
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2,))
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2))
a
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2),dimnames=list(c("M","F"),c("fic,"non"")))
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2),dimnames=list(c("M","F"),c("fic,"non"")))
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2),dimnames=list(c("M","F"),c("fic,"non)))
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2),dimnames=list(c("M","F"),c("fic","non")))
a
a=array(c(6,7,10,3,4,5,5,1),c(2,2,2),dimnames=list(c("M","F"),c("fic","non"),c("young","old")))
a
a=array(c(6,7,10,3,4,5,5,1),(2,2,2))
a=array(1:8,c(2,2,2)
a=matrix(c(6,10,7,3),ncol=2)
a
chisqtest(a)
chisq.test(a)
a=matrix(c(1,10,7,3),ncol=2)
chisq.test(a)
a=rbind(1:9,ncol=3)
a
a=(c(1,2,3),c(4,5,6))
a=(c(1,2,3),c(4,5,6))
a1=c(1,2,3)
a2=c(4,5,6)
a=rbind(a1,a2)
a
a=cbind(a1,a2)
a
version()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# using the package:
updateR()
runExample("01_hello") # a histogram
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runExample("01_hello") # a histogram
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
source('~/.active-rstudio-document', echo=TRUE)
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
library(shiny)
> h1("My title")
h1("My title")
library(shiny)
h1("My title")
p=h1("My title")
p
shiny::runApp('/AppuR/Prob_View')
?qnorm
?qnorm
qnorm(0.5)
?qnor
x = seq(-3,3,0.001)
y=dnorm(x)
plot(y)
curve(dnorm(x),-3,3)
))
shiny::runApp('/AppuR/Prob_View')
?do.cal
?do.call
?switch
sample(N,n)
sample(300,40)
sample(200,3)
sample(200,3,replace=TRUE)
set.seed(123)
runif(3)
runif(5)
set.seed(123)
runif(5)
msn?
?
# sys.sample(50, 5)
sys.sample(385,10)
}
}
systematic.sample <- function(n, N, initial=F){
print sys.sample(50,5)
sys.sample(50,5)
N=385
n=10
k=floor(N/n);k
start=sample(1:k,1)
sys<-seq(start,N,k);sys
sample_sys<-test1[sys,1]
sample_sys
setwd("/Users/gokulbhandari/Desktop/untitled folder")
hw=read.csv("hw.csv", header=TRUE)
N=dim(hw)[1]
N
n=10
k=floor(N/n);k
start=sample(1:k,1)
k=floor(N/n);k
getwd()
setwd("/Users/gokulbhandari/Desktop/untitled folder")
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week2/")
#getwd()
#list.files()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
pollutatnmean("specdata","nitrate")
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week2/")
#getwd()
#list.files()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
best("SC", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
##Part 3: rankhospital.R:
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death
## rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
}
##Part 4: rankall.R:
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that outcome is valid
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## For each state, find the hospital of the given rank
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
# Generate an empty vector that will be filled later, row by row, to
# generate the final output.
output <- vector()
states <- levels(data[, 7])
for(i in 1:length(states)) {
statedata <- data[grep(states[i], data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2],
na.last = NA), ]
hospital <- if(num == "best") {
orderdata[1, 2]
} else if(num == "worst") {
orderdata[nrow(orderdata), 2]
} else{
orderdata[num, 2]
}
output <- append(output, c(hospital, states[i]))
}
## Return a data frame with the hospital names and the (abbreviated)
## state name
output <- as.data.frame(matrix(output, length(states), 2, byrow = TRUE))
colnames(output) <- c("hospital", "state")
rownames(output) <- states
output
}
best("SC", "heart attack")
